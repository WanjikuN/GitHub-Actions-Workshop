name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

jobs:
  test:
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: "3.12.3"  # Change to match your Python version

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

        - name: Set Django settings
          run: echo "DJANGO_SETTINGS_MODULE=todo_app.settings" >> $GITHUB_ENV

        - name: Run tests with pytest
          run: |
            pytest --junitxml=reports/test-results.xml  # Generates a test report

        - name: Upload test report
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: pytest-results
            path: reports/test-results.xml

  coverage:
      needs: test  # Runs only after tests pass
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: "3.12.3"

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt pytest pytest-cov

        - name: Set Django settings
          run: echo "DJANGO_SETTINGS_MODULE=todo_app.settings" >> $GITHUB_ENV

        - name: Run tests with coverage
          run: |
            pytest --cov=todo_app --cov-report=xml --cov-report=html

        - name: Upload coverage report
          uses: actions/upload-artifact@v4
          with:
            name: coverage-report
            path: htmlcov  # Uploads the generated coverage report

  sonarqube:
      needs: test  # Run SonarQube after tests
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: SonarQube Scan
          uses: sonarsource/sonarqube-scan-action@master
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: "https://sonarcloud.io"  
          with:
            args: >
              -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
              -Dsonar.organization=kadimasum  # Required for SonarCloud
              -Dsonar.python.coverage.reportPaths=coverage.xml

  build:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker Buildx (for building images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/todo-app:$GITHUB_SHA .

      # Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/todo-app:$GITHUB_SHA

      # Send deployment status to Slack (Success message)
      - name: Notify Slack (Success)
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment to Docker Hub was successful!"}' ${{ secrets.SLACK_WEBHOOK_URL }}
      
  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Checkout code from the repository
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     # Deploy Docker container to Render
  #     - name: Deploy to Render
  #       run: |
  #         curl -X POST \
  #           -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
  #           -H "Content-Type: application/json" \
  #           -d '{"serviceId":"YOUR_RENDER_SERVICE_ID", "dockerImage":"${{ secrets.DOCKER_USERNAME }}/todo-app:$GITHUB_SHA"}' \
  #           https://api.render.com/v1/services/YOUR_RENDER_SERVICE_ID/deploy

  #     # Send deployment status to Slack (Deployment Complete)
  #     - name: Notify Slack (Complete)
  #       if: success()
  #       run: |
  #         curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment to Render is complete!"}' ${{ secrets.SLACK_WEBHOOK_URL }}

  #     # Send failure status to Slack if any step fails
  #     - name: Notify Slack (Failure)
  #       if: failure()
  #       run: |
  #         curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment failed!"}' ${{ secrets.SLACK_WEBHOOK_URL }}


  # slack:
  #   runs-on: ubuntu-latest
  #   env:
  #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #   steps:
  #     - uses: act10ns/slack@v2
  #       with:
  #         status: ${{ job.status }}
  #         steps: ${{ toJson(steps) }}
  #         channel: 'github-actions-workshop'
  #       if: always()